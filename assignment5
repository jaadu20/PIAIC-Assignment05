// Question 1
console.log("Hello, World!");
// Question 2
let temperature: number = 15;
if (temperature < 20) {
  console.log("It's cold!");
}
// Question 3
let apples: number = 10;
apples -= 3;
console.log("Remaining apples:", apples);

// Question 4
let firstName: string = "John";
let lastName: string = "Doe";
let fullName: string = firstName + " " + lastName;
console.log("Full Name:", fullName);

// Question 5
if (5 > 3) {
    console.log("Yes");
} else {
    console.log("No");
}

// Question 6
function calculateArea(radius: number): number {
    return Math.PI * radius * radius;
}

// Question 7
for (let i = 1; i <= 50; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
        console.log("FizzBuzz");
    } else if (i % 3 === 0) {
        console.log("Fizz");
    } else if (i % 5 === 0) {
        console.log("Buzz");
    } else {
        console.log(i);
    }
}

// Question 8
let temperatures: number[] = [22, 18, 25, 20, 19];
let highestTemperature: number = Math.max(...temperatures);
console.log("Highest Temperature:", highestTemperature);

// Question 9
let age: number = parseInt(prompt("Enter your age:"));

if (age < 18) {
    console.log("You are a minor.");
} else {
    console.log("You are an adult.");
}

// Question 10
function countPositiveNumbers(numbers: number[]): number {
    return numbers.filter(num => num > 0).length;
}

// Question 11
function filterWordsStartingWithA(words: string[]): string[] {
    return words.filter(word => word.startsWith('a'));
}

// Question 12
let fruits: string[] = ["apple", "banana", "orange", "kiwi"];
console.log("Second to Last Element:", fruits[fruits.length - 2]);

// Question 13
function squareArray(numbers: number[]): number[] {
    return numbers.map(num => num * num);
}

// Question 14
function reverseArray(arr: any[]): any[] {
    let reversedArray: any[] = [];
    for (let i = arr.length - 1; i >= 0; i--) {
        reversedArray.push(arr[i]);
    }
    return reversedArray;
}

// Question 15
function analyzeScores(scores: number[]): void {
    let maxScore: number = Math.max(...scores);
    let minScore: number = Math.min(...scores);
    
    let exceededMax: number = scores.filter(score => score > maxScore).length;
    let fellBelowMin: number = scores.filter(score => score < minScore).length;
    
    console.log("Number of times score exceeded maximum:", exceededMax);
    console.log("Number of times score fell below minimum:", fellBelowMin);
}

// Question 16
function removeFalseyValues(arr: any[]): any[] {
    return arr.filter(value => !!value);
}

// Question 17
let arr1: number[] = [1, 2, 3];
let arr2: number[] = [4, 5, 6];
let concatenatedArray: number[] = arr1.concat(arr2);
console.log("Concatenated Array:", concatenatedArray);

// Question 18
function sumOfElements(arr: number[], isEven: boolean): number {
    return arr.filter(num => num % 2 === (isEven ? 0 : 1)).reduce((acc, curr) => acc + curr, 0);
}

// Question 19
function findElementIndex(arr: any[], element: any): number {
    return arr.indexOf(element);
}

// Question 20
function findSmallestNumber(arr: number[]): number {
    return Math.min(...arr);
}

// Question 21
function calculateProduct(numbers: number[]): number {
    return numbers.reduce((acc, curr) => acc * curr, 1);
}

// Question 22
function filterByLength(strings: string[], n: number): string[] {
    return strings.filter(str => str.length > n);
}

// Question 23
function findDuplicates(arr: any[]): void {
    let duplicates: any[] = [];
    arr.forEach((value, index) => {
        if (arr.indexOf(value, index + 1) !== -1 && duplicates.indexOf(value) === -1) {
            duplicates.push(value);
        }
    });
    console.log("Duplicates:", duplicates);
}

// Question 24
function incrementAll(arr: number[]): number[] {
    return arr.map(num => num + 1);
}

// Question 25
function countOccurrences(arr: any[], element: any): number {
    return arr.filter(value => value === element).length;
}

// Question 26
function isSorted(arr: number[]): boolean {
    return arr.every((value, index) => index === 0 || value >= arr[index - 1]);
}

// Question 27
function formatNames(names: string[]): string {
    if (names.length === 0) return "";
    if (names.length === 1) return names[0];
    if (names.length === 2) return names.join(" and ");
    
    let formattedNames: string = names.slice(0, names.length - 1).join(", ");
    formattedNames += " and " + names[names.length - 1];
    return formattedNames;
}

// Question 28
function fahrenheitToCelsius(temperatures: number[]): number[] {
    return temperatures.map(temp => (temp - 32) * (5/9));
}

// Question 29
function minMaxAverage(numbers: number[]): { min: number, max: number, average: number } {
    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const average = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;
    return { min, max, average };
}

// Question 30
function swapElements(arr: any[], index1: number, index2: number): void {
    if (index1 >= 0 && index1 < arr.length && index2 >= 0 && index2 < arr.length) {
        [arr[index1], arr[index2]] = [arr[index2], arr[index1]];
    }
}

// Question 31
function countCharacterOccurrences(str: string, char: string): number {
    return str.split('').reduce((count, currentChar) => currentChar === char ? count + 1 : count, 0);
}

// Question 32
interface TodoItem {
    task: string;
    completed: boolean;
}

function logIncompleteTasks(todoList: TodoItem[]): void {
    todoList.forEach(item => {
        if (!item.completed) {
            console.log(item.task);
        }
    });
}

// Question 
function sortIntegers(arr: number[]): number[] {
    return arr.sort((a, b) => a - b);
}

// Question 34
function reverseArr<T>(arr: T[]): T[] {
    let reversed: T[] = [];
    for (let i = arr.length - 1; i >= 0; i--) {
        reversed.push(arr[i]);
    }
    return reversed;
}
const reversedArray = reverseArr([1, 2, 3, 4, 5]);
console.log(reversedArray); 
// Question 35
function basicCalculator(operand1: number, operand2: number, operator: string): number | string {
    switch (operator) {
        case '+':
            return operand1 + operand2;
        case '-':
            return operand1 - operand2;
        case '*':
            return operand1 * operand2;
        case '/':
            if (operand2 !== 0) {
                return operand1 / operand2;
            } else {
                return "Cannot divide by zero";
            }
        default:
            return "Invalid operator";
    }
}

const result = basicCalculator(5, 3, '+');
console.log(result); 
